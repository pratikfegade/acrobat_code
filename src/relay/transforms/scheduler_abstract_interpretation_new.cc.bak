/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*!
 *
 * \file src/relay/transforms/fuse_ops.cc
 *
 * \brief This is a backend-aware optimization pass.
 *   Fuse necessary ops into a single one.
 */
#include <tvm/relay/analysis.h>
#include <tvm/relay/expr_functor.h>
#include <tvm/relay/op_attr_types.h>
#include <tvm/relay/transform.h>
#include <tvm/runtime/vm/dynamic_batching.h>
#include <tvm/tir/builtin.h>
#include <tvm/tir/expr.h>
#include <tvm/tir/op.h>
#include <tvm/tir/stmt.h>

#include <limits>

#include "../../printer/text_printer.h"
#include "../../support/arena.h"
#include "../analysis/call_graph.h"
#include "../op/annotation/annotation.h"
#include "../op/memory/memory.h"
#include "../op/vm/vm.h"
#include "./function_pointer_analysis.h"
#include "./pass_utils.h"
#include "./pattern_utils.h"

namespace tvm {
namespace relay {

using SAIVarKey = std::pair<const FunctionNode*, const VarNode*>;
using SAIFunctionKey = std::pair<const FunctionNode*, const FunctionNode*>;
using SAIOpKey = std::pair<const FunctionNode*, const CallNode*>;

using SAIBaseExprFunctor = ExprFunctor<int(const Expr& n)>;
using SAIVarStateMap = std::unordered_map<SAIVarKey, int, PairHash, PairEquals>;
using SAIInvokeTVMOpDepthMap = std::unordered_map<SAIOpKey, int, PairHash, PairEquals>;
using SAIFunctionStateMap = std::unordered_map<SAIFunctionKey, int, PairHash, PairEquals>;

constexpr int MAX_DEPTH_VALUE = 1 << 4;
class SchedulingAbstractInterpreter : public SAIBaseExprFunctor {
 public:
  SchedulingAbstractInterpreter(IRModule& mod, const FunctionSet& recursive_functions,
                                const CalleesMap& callees_map)
      : mod_(mod), recursive_functions_(recursive_functions), callees_map_(callees_map) {
    for (auto kv : mod_->functions) {
      func_name_map_[kv.second.get()] = kv.first->name_hint;
      // std::cout << "[FUNC_NAME] " << kv.second.get() << " " << kv.first->name_hint << std::endl;
    }
    func_name_map_[nullptr] = "START";
    stack_.push_back(nullptr);

    if (mod->ContainGlobalVar("map")) {
      map_fun_node_ = mod->Lookup("map").as<FunctionNode>();
    }
  }

  IRModule PerformAnalysis() {
    auto main_func = Downcast<Function>(mod_->Lookup("main"));
    for (auto arg : main_func->params) {
      var_states_[VarKey(nullptr, arg.get())] = 0;
    }

    auto call_graph = CallGraph(mod_);
    size_t i = 0;
    for (; i < max_iterations_; ++i) {
      // std::cout << "[SAI] ITERATION " << i << std::endl;
      visited_functions_.clear();
      changed_ = false;
      auto entry_func = Downcast<Function>(mod_->Lookup("main"));
      VisitBody(entry_func);
      if (!changed_) {
        break;
      }
    }

    std::unordered_map<const VarNode*, int> merged_var_states;
    for (auto kv : var_states_) {
      merged_var_states[kv.first.second] =
          Merge(merged_var_states[kv.first.second], kv.second).first;
    }

    std::unordered_map<const FunctionNode*, int> merged_function_states;
    for (auto kv : function_states_) {
      merged_function_states[kv.first.second] =
          Merge(merged_function_states[kv.first.second], kv.second).first;
    }

    CallDepthMap merged_op_depths;
    for (auto kv : prim_func_call_depths_) {
      merged_op_depths[kv.first.second] = Merge(merged_op_depths[kv.first.second], kv.second).first;
    }

    if (false) {
      for (auto kv : merged_var_states) {
        std::cout << "[SAI]  Var Depths: " << kv.first->vid->name_hint << " " << kv.second
                  << std::endl;
      }

      for (auto kv : merged_function_states) {
        std::cout << "[SAI]  Function Depths: " << func_name_map_[kv.first] << " " << kv.second
                  << std::endl;
      }

      std::cout << "[SAI] Iterations: " << i << std::endl;
      for (auto kv : merged_op_depths) {
        if (kv.second < MAX_DEPTH_VALUE) {
          std::cout << "[SAI]  Call Depths: " << PrettyPrint(GetRef<Expr>(kv.first)) << " "
                    << kv.second << std::endl;
        }
      }
    }

    class AddDepthToCalls : public ExprMutator {
     public:
      AddDepthToCalls(const CallDepthMap& merged_op_depths) : merged_op_depths_(merged_op_depths) {}

      Expr VisitExpr_(const CallNode* op) {
        auto it = merged_op_depths_.find(op);
        auto call = ExprMutator::VisitExpr_(op);
        if (it != merged_op_depths_.end() && it->second < MAX_DEPTH_VALUE) {
          auto new_op = call.as<CallNode>();
          auto depth = it->second;
          ICHECK(new_op->attrs.defined() && new_op->attrs.as<DictAttrsNode>());
          auto attrs = Downcast<DictAttrs>(new_op->attrs);
          auto new_attrs = attrs.WithAttr(tir::attr::kDBGraphDepth, Integer(depth));
          return Call(new_op->op, new_op->args, new_attrs, new_op->type_args, new_op->span);
        }
        return call;
      }

      const CallDepthMap& merged_op_depths_;
    };

    AddDepthToCalls mutator(merged_op_depths);
    Map<GlobalVar, Function> new_funcs;
    for (const auto& it : mod_->functions) {
      if (it.second.as<FunctionNode>()) {
        auto func = Downcast<Function>(it.second);
        func = Downcast<Function>(mutator(func));
        new_funcs.Set(it.first, func);
      }
    }
    for (auto pair : new_funcs) {
      mod_->Add(pair.first, pair.second, true);
    }

    return mod_;
  }

 private:
  const FunctionNode* GetCurrentContext() { return stack_[stack_.size() - 2]; }

  const FunctionNode* GetCurrentFunction() { return stack_.back(); }

  std::pair<int, bool> Merge(const int& vals1, const int& vals2) {
    bool changed = false;
    int result = std::max(vals1, vals2);
    if (result != vals1) {
      changed = true;
    }
    return std::make_pair(result, changed);
  }

  int Collapse(const int& vals) { return vals; }

  template <typename T, typename MapType>
  int Add(MapType& map, const T& key, const int& to_add) {
    auto it = map.find(key);
    if (it == map.end()) {
      map[key] = to_add;
      changed_ = true;
    } else {
      auto res = Merge(map[key], to_add);
      map[key] = res.first;
      changed_ |= res.second;
    }
    return map.at(key);
  }

  int Add(const SAIVarKey& var, const int& to_add, const std::string& reason) {
    // if (to_add == MAX_DEPTH_VALUE) {
    // std::cout << "Capping " << func_name_map_[var.first] << " " << var.second->vid->name_hint
    // << " " << reason << std::endl;
    // }
    return Add<SAIVarKey, SAIVarStateMap>(var_states_, var, to_add);
  }

  int Add(const SAIFunctionKey& func, const int& to_add) {
    return Add<SAIFunctionKey, SAIFunctionStateMap>(function_states_, func, to_add);
  }

  SAIVarKey VarKey(const FunctionNode* ctx, const VarNode* var) { return std::make_pair(ctx, var); }

  SAIFunctionKey FunctionKey(const FunctionNode* ctx, const FunctionNode* func) {
    return std::make_pair(ctx, func);
  }

  SAIOpKey OpKey(const FunctionNode* ctx, const CallNode* op) { return std::make_pair(ctx, op); }

  int CappedIncr(int n) {
    if (n >= MAX_DEPTH_VALUE) {
      return n;
    } else {
      ICHECK_LE(static_cast<long>(n) + static_cast<long>(1), static_cast<long>(MAX_DEPTH_VALUE));
      return n + 1;
    }
  }

  int VisitBody(const Function& func) {
    stack_.push_back(func.get());
    auto res = VisitExpr(func->body);
    stack_.pop_back();
    return res;
  }

  int VisitExpr_(const ConstantNode* op) { return 0; }

  int VisitExpr_(const TupleNode* op) {
    int tuple_depth = 0;
    for (size_t i = 0; i < op->fields.size(); ++i) {
      tuple_depth = Merge(tuple_depth, VisitExpr(op->fields[i])).first;
    }
    return tuple_depth;
  }

  int VisitExpr_(const VarNode* op) {
    if (function_environments_[GetCurrentFunction()].count(op)) {
      return function_environments_[GetCurrentFunction()][op];
    }

    auto key = VarKey(GetCurrentContext(), op);
    auto var = GetRef<Var>(op);
    auto it = var_states_.find(key);
    if (it == var_states_.end()) {
      var_states_[key] = 0;
      changed_ = true;
    }
    return var_states_[key];
  }

  int VisitExpr_(const GlobalVarNode* op) { return 0; }

  int VisitExpr_(const FunctionNode* op) {
    auto free_vars = FreeVarsDedup(op->body);
    for (auto param : op->params) {
      free_vars.erase(param);
    }
    int depth = 0;
    for (auto var : free_vars) {
      auto res = VisitExpr(var);
      depth = Merge(depth, res).first;

      int old_val = function_environments_[op][var.get()];
      auto merge_res = Merge(old_val, res);
      function_environments_[op][var.get()] = merge_res.first;
      // std::cout << "[SAI] FuncEnv " << var->vid->name_hint << " " << var.get() << " "
      // << merge_res.first << " " << function_environments_[op][var.get()] << std::endl;
      changed_ = changed_ || merge_res.second;
    }
    return depth;
  }

  bool IsMapFuncInModule() { return map_fun_node_ != nullptr; }

  const FunctionNode* GetMapFuncNode() { return map_fun_node_; }

  int VisitMapBody(const int input_depth, const int lambda_depth, const FunctionNode* map_context) {
    auto map_fn_node = GetMapFuncNode();
    auto lambda_var = map_fn_node->params[0];
    FunctionSet lambda_callees;
    PostOrderVisit(map_fn_node->body, [&](const Expr& expr) {
      if (auto cn = expr.as<CallNode>()) {
        if (cn->op == lambda_var) {
          auto it = callees_map_.find(OpKey(map_context, cn));
          if (it != callees_map_.end()) {
            auto callees = it->second;
            lambda_callees.insert(callees.begin(), callees.end());
          }
        }
      }
    });

    stack_.push_back(map_fn_node);

    auto lambda_context = map_fn_node;
    int ret = 0;
    for (auto callee : lambda_callees) {
      auto name = func_name_map_[callee];
      auto callee_fn = GetRef<Function>(callee);
      ICHECK_EQ(callee->params.size(), 1);
      auto fn_key = FunctionKey(lambda_context, callee);

      bool args_changed = false;
      bool old_changed = false;
      std::swap(old_changed, changed_);
      auto param_key = VarKey(lambda_context, callee->params[0].get());
      auto res = Add(param_key, input_depth, "Map list param arg");
      std::swap(old_changed, changed_);
      changed_ = changed_ || old_changed;
      args_changed = args_changed || old_changed;

      bool visited = visited_functions_.count(fn_key);
      if (args_changed || !visited) {
        visited_functions_.insert(fn_key);
        auto res = VisitBody(callee_fn);
        res = Add(fn_key, res);
        ret = Merge(res, ret).first;
      } else if (visited) {
        auto it = function_states_.find(fn_key);
        if (it != function_states_.end()) {
          ret = Merge(it->second, ret).first;
        }
      }
    }
    stack_.pop_back();
    return ret;
  }

  int VisitExpr_(const CallNode* op) {
    auto on_device_props = GetOnDeviceProps(op);
    if (on_device_props.body.defined()) {
      return VisitExpr(on_device_props.body);
    }

    if (op->op == GetInvokeTVMOp()) {
      auto callee_prim_func = mod_->Lookup(Downcast<GlobalVar>(op->args[0]));

      auto inputs_depth = VisitExpr(op->args[1]);

      auto max_inputs_depth = Collapse(inputs_depth);
      auto output_depth = CappedIncr(max_inputs_depth);
      auto outputs_tuple = op->args[2].as<TupleNode>();
      for (auto output : outputs_tuple->fields) {
        ICHECK(output.as<VarNode>());
        auto var = Downcast<Var>(output);
        auto res = Add(VarKey(GetCurrentContext(), var.get()), output_depth, "OpOutput");
      }
      prim_func_call_depths_[OpKey(GetCurrentContext(), op)] =
          std::max(prim_func_call_depths_[OpKey(GetCurrentContext(), op)], max_inputs_depth);
      return output_depth;
    } else if (op->op.as<OpNode>()) {
      return 0;
    } else if (op->op.as<ConstructorNode>()) {
      int args_depth = 0;
      for (auto arg : op->args) {
        args_depth = Merge(args_depth, VisitExpr(arg)).first;
      }
      return args_depth;
    } else {
      auto callee_context = GetCurrentFunction();
      auto it = callees_map_.find(OpKey(GetCurrentContext(), op));
      if (it == callees_map_.end()) {
        for (auto kv : callees_map_) {
          std::cout << func_name_map_[kv.first.first] << " " << kv.first.second->op << std::endl;
        }
      }
      ICHECK(it != callees_map_.end())
          << func_name_map_[GetCurrentContext()] << " " << GetCurrentContext() << " " << op->op;
      auto callees = it->second;
      bool callee_may_be_recursive = false;

      int ret = 0;
      for (auto callee : callees) {
        if (IsMapFuncInModule() && callee == GetMapFuncNode()) {
          auto lambda_state = VisitExpr(op->args[0]);
          auto list_state = VisitExpr(op->args[1]);
          return VisitMapBody(list_state, lambda_state, GetCurrentFunction());
        }

        auto name = func_name_map_[callee];
        bool print = false;  //(name == "map");
        if (print) {
          std::cout << "[SAI]  map call " << PrettyPrint(RemoveOnDeviceCalls(GetRef<Expr>(op)))
                    << std::endl;
        }
        auto callee_fn = GetRef<Function>(callee);
        auto fn_key = FunctionKey(callee_context, callee);
        bool args_changed = false;
        auto op_state = VisitExpr(op->op);
        for (size_t i = 0; i < op->args.size(); ++i) {
          auto param_state = VisitExpr(op->args[i]);
          bool old_changed = false;
          std::swap(old_changed, changed_);
          auto param_key = VarKey(callee_context, callee->params[i].get());
          std::stringstream arg_str;
          arg_str << op->args[i];
          auto res = Add(
              param_key, param_state,
              "Function param arg " + arg_str.str() + " in " + func_name_map_[GetCurrentContext()]);

          // res = Add(param_key, op_state, "OpState");
          std::swap(old_changed, changed_);
          changed_ = changed_ || old_changed;
          args_changed = args_changed || old_changed;
          if (print && i == op->args.size() - 1) {
            std::cout << "[SAI]    map list depth " << param_state << " " << res << " "
                      << op->args[i] << " " << callee->params[i] << std::endl;
          }
        }

        bool visited = visited_functions_.count(fn_key);
        int path = -1;
        if (args_changed || !visited) {
          path = 1;
          visited_functions_.insert(fn_key);
          auto res = VisitBody(callee_fn);
          res = Add(fn_key, res);
          ret = Merge(res, ret).first;
        } else if (visited) {
          auto it = function_states_.find(fn_key);
          if (it != function_states_.end()) {
            path = 2;
            ret = Merge(it->second, ret).first;
          } else {
            path = 3;
          }
        }

        if (print) {
          std::cout << "[SAI]   treelstm call ret " << ret << " " << args_changed << " " << path
                    << std::endl;
        }
      }
      return ret;
    }
  }

  int VisitExpr_(const LetNode* op) {
    auto value_res = VisitExpr(op->value);
    Add(VarKey(GetCurrentContext(), op->var.get()), value_res, "Let value");
    return VisitExpr(op->body);
  }

  int VisitExpr_(const IfNode* op) {
    VisitExpr(op->cond);
    auto then_ret = VisitExpr(op->true_branch);
    auto else_ret = VisitExpr(op->false_branch);
    return Merge(then_ret, else_ret).first;
  }

  int VisitExpr_(const OpNode* op) { return 0; }

  int VisitExpr_(const TupleGetItemNode* op) {
    auto tuple_res = VisitExpr(op->tuple);
    return tuple_res;
  }

  int VisitExpr_(const RefCreateNode* op) { return 0; }

  int VisitExpr_(const RefReadNode* op) { return 0; }

  int VisitExpr_(const RefWriteNode* op) { return 0; }

  int VisitExpr_(const ConstructorNode* op) { return 0; }

  int VisitExpr_(const MatchNode* op) {
    auto input_depth = Collapse(VisitExpr(op->data));
    std::stringstream data_str;
    data_str << op->data;
    int ret = 0;
    for (auto clause : op->clauses) {
      auto pattern_vars = CollectPatternVars(clause->lhs);
      for (auto& var : pattern_vars) {
        Add(VarKey(GetCurrentContext(), var.get()), input_depth, "Match pattern " + data_str.str());
      }
      auto clause_ret = VisitExpr(clause->rhs);
      ret = Merge(ret, clause_ret).first;
    }
    return ret;
  }

  const IRModule& mod_;
  const FunctionSet& recursive_functions_;
  const CalleesMap& callees_map_;

  SAIVarStateMap var_states_;
  SAIFunctionStateMap function_states_;
  SAIInvokeTVMOpDepthMap prim_func_call_depths_;
  std::unordered_set<SAIFunctionKey, PairHash, PairEquals> visited_functions_;
  size_t max_iterations_{20};
  bool changed_{false};
  std::unordered_map<const BaseFuncNode*, std::string> func_name_map_;
  std::vector<const FunctionNode*> stack_;
  std::unordered_map<const FunctionNode*, std::unordered_map<const VarNode*, int>>
      function_environments_;
  const FunctionNode* map_fun_node_{nullptr};
};

namespace {
using ContextT = const Object*;
using TaintT = Integer;
using VarSet = std::unordered_set<Var, ObjectPtrHash, ObjectPtrEqual>;

using FunctionSet = Map<Function, Bool>;

class FullTaint;
/*!
 * \brief FullTaint tensor type.
 */
class FullTaintNode : public Object {
 public:
  TaintT taint;
  FunctionSet function_points_to;

  void VisitAttrs(tvm::AttrVisitor* v) {
    v->Visit("taint", &taint);
    v->Visit("function_points_to", &function_points_to);
  }

  bool SEqualReduce(const FullTaintNode* other, SEqualReducer equal) const {
    return equal(taint, other->taint) && equal(function_points_to, other->function_points_to);
  }

  void SHashReduce(SHashReducer hash_reduce) const {
    hash_reduce(taint);
    hash_reduce(function_points_to);
  }

  static constexpr const char* _type_key = "relay.FullTaint";
  TVM_DECLARE_FINAL_OBJECT_INFO(FullTaintNode, Object);
};

class FullTaint : public ObjectRef {
 public:
  /*!
   * \brief The constructor
   * \param data The data of the constant tensor.
   * \param span The source span of the expression.
   */
  TVM_DLL explicit FullTaint(TaintT taint, FunctionSet function_points_to = FunctionSet());

  TVM_DEFINE_OBJECT_REF_METHODS(FullTaint, ObjectRef, FullTaintNode);
};

FullTaint::FullTaint(TaintT taint, FunctionSet function_points_to) {
  ObjectPtr<FullTaintNode> n = make_object<FullTaintNode>();
  n->taint = std::move(taint);
  n->function_points_to = std::move(function_points_to);
  data_ = std::move(n);
}

using BaseExprFunctor = ExprFunctor<FullTaint(const Expr& n, ContextT)>;
using VarStateMap =
    std::unordered_map<std::pair<ContextT, const VarNode*>, FullTaint, PairHash, PairEquals>;
using FunctionStateMap =
    std::unordered_map<std::pair<ContextT, const FunctionNode*>, FullTaint, PairHash, PairEquals>;
using FunctionEnvironmentMap = std::unordered_map<const FunctionNode*, Map<Var, FullTaint>>;
using OnStackSet =
    std::unordered_set<std::pair<ContextT, const FunctionNode*>, PairHash, PairEquals>;

Array<Bool> ConstructBoolArray(size_t size, bool value) {
  Array<Bool> result;
  for (size_t i = 0; i < size; ++i) {
    result.push_back(Bool(value));
  }
  return std::move(result);
}

int GetTypeSize(const Type& type) {
  size_t state_size = 1;
  if (auto ttn = type.as<TupleTypeNode>()) {
    state_size = ttn->fields.size();
  }
  return state_size;
}

Array<Bool> CreateStateForType(const Type& type, bool value) {
  return ConstructBoolArray(GetTypeSize(type), value);
}

Array<Bool> SingletonArray(bool value) { return ConstructBoolArray(1, value); }

class TaintAnalysis : public BaseExprFunctor {
 public:
  TaintAnalysis(const IRModule& mod) : mod_(mod) {}

  Map<Function, Array<Bool>> PerformAnalysis() {
    auto main_func = Downcast<Function>(mod_->Lookup("main"));

    ICHECK_EQ(main_func->type_params.size(), 0);
    for (auto param : main_func->params) {
      ICHECK(!param->checked_type().as<FuncTypeNode>());
      Add(param, GetInitialContext(), FullTaint(Integer(0), FunctionSet()), "Main param");
    }

    for (size_t i = 0; i < 10; ++i) {
      // std::cout << "[MPT] ITERATION " << i << std::endl;

      this->Reset();
      type_environment_stack_.push_back(Map<TypeVar, Type>());
      environment_stack_.push_back(Map<Var, FullTaint>());
      auto context_fn_key = std::make_pair(GetInitialContext(), main_func.get());
      on_stack_.insert(context_fn_key);
      function_stack_.push_back(main_func);
      auto full_taint = this->VisitExpr(main_func->body, GetInitialContext());
      function_stack_.pop_back();
      on_stack_.erase(context_fn_key);
      environment_stack_.pop_back();
      type_environment_stack_.pop_back();
    }

    std::unordered_map<const VarNode*, FullTaint> merged_var_states;
    for (auto kv : var_states_) {
      auto merged_taint = kv.second;
      auto it = merged_var_states.find(kv.first.second);
      if (it != merged_var_states.end()) {
        merged_taint = Merge(Array<FullTaint>({it->second, kv.second}));
      }
      merged_var_states[kv.first.second] = merged_taint;
    }

    std::unordered_map<const FunctionNode*, FullTaint> merged_function_states;
    for (auto kv : function_states_) {
      auto merged_taint = kv.second;

      auto it = merged_function_states.find(kv.first.second);
      if (it != merged_function_states.end()) {
        merged_taint = Merge(Array<FullTaint>({it->second, kv.second}));
      }
      merged_function_states[kv.first.second] = merged_taint;
    }

    return mod_;
  }

 private:
  std::string GetFunctionName(const Function& fn) {
    return fn->GetAttr<String>("db.function_name").value();
  }

  void Reset() {
    on_stack_.clear();
    environment_stack_.clear();
    type_environment_stack_.clear();
  }

  TaintT MergeTaints(const TaintT& vals1, const TaintT& vals2) {
    return TaintT(std::max(vals1.value(), vals2.value()));
  }

  FunctionSet MergeFunctionSets(const FunctionSet& set1, const FunctionSet& set2) {
    FunctionSet result;
    for (auto kv : set1) {
      result.Set(kv.first, kv.second);
    }
    for (auto kv : set2) {
      result.Set(kv.first, kv.second);
    }
    return result;
  }

  FullTaint Merge(const Array<FullTaint>& full_taints) {
    TaintT taint = Integer(0);
    FunctionSet function_points_to;
    for (auto& full_taint : full_taints) {
      auto this_taint = full_taint->taint;
      auto this_function_points_to = full_taint->function_points_to;
      taint = MergeTaints(taint, this_taint);
      function_points_to = MergeFunctionSets(function_points_to, this_function_points_to);
    }
    return FullTaint(taint, function_points_to);
  }

  template <typename T, typename MapType>
  FullTaint Add(MapType& map, const T& obj, ContextT context, const FullTaint& to_add) {
    auto key = std::make_pair(context, obj.get());
    auto it = map.find(key);
    if (it == map.end()) {
      map[key] = to_add;
      return to_add;
    } else {
      auto merged = Merge(Array<FullTaint>({it->second, to_add}));
      map[key] = merged;
      return merged;
    }
  }

  FullTaint Add(const Var& var, ContextT current_context, const FullTaint& to_add,
                const std::string& reason) {
    return Add<Var, VarStateMap>(var_states_, var, current_context, to_add);
  }

  FullTaint Add(const Function& fn, ContextT current_context, const FullTaint& to_add) {
    return Add<Function, FunctionStateMap>(function_states_, fn, current_context, to_add);
  }

  FullTaint GetOrCreateFunctionState(const Function& fn, ContextT context) {
    auto key = std::make_pair(context, fn.get());
    auto it = function_states_.find(key);
    if (it == function_states_.end()) {
      auto taint = Integer(0);

      auto function_points_to = FunctionSet();
      auto full_taint = FullTaint(taint, function_points_to);
      return full_taint;
    } else {
      return it->second;
    }
  }

  ContextT GetInitialContext() { return nullptr; }

  Type ConcretizeType(const Type& type) {
    // auto current = type;
    // auto it = type_environment_stack_.rbegin();
    // while (it != type_environment_stack_.rend()) {
    //   auto new_type = TypeSubst(current, *it);
    //   if (new_type.same_as(current)) {
    //     break;
    //   }
    //   current = new_type;
    //   it++;
    // }
    // return current;
    return type;
  }

  FullTaint ResizeTaint(const FullTaint& taint, const Type& from, const Type& to) {
    size_t from_size = GetTypeSize(from);
    size_t to_size = GetTypeSize(to);
    if (from_size == to_size) {
      return taint;
    }
    return FullTaint(ConstructBoolArray(to_size, CollapseTaint(taint->taint)),
                     taint->function_points_to);
  }

  FullTaint VisitExpr_(const ConstantNode* op, ContextT current_context) {
    auto taint = Array<Bool>({Bool(true)});
    auto function_points_to = FunctionSet();
    return FullTaint(taint, function_points_to);
  }

  FullTaint VisitExpr_(const TupleNode* op, ContextT current_context) {
    TaintT taint;
    FunctionSet function_points_to;
    for (auto field : op->fields) {
      auto field_full_taint = this->VisitExpr(field, current_context);
      taint.push_back(CollapseTaint(field_full_taint->taint));
      function_points_to =
          MergeFunctionSets(function_points_to, field_full_taint->function_points_to);
    }
    return FullTaint(taint, function_points_to);
  }

  FullTaint VisitExpr_(const VarNode* op, ContextT current_context) {
    bool print = false;  // op->checked_type().as<TypeCallNode>();

    if (print) {
      std::cout << "[MPT] Getting var " << current_context << " " << op->vid->name_hint
                << std::endl;
    }

    auto var = GetRef<Var>(op);
    auto current_environment = environment_stack_.back();
    auto it = current_environment.find(var);
    if (it != current_environment.end()) {
      auto full_taint = (*it).second;
      if (print) {
        std::cout << "[MPT]  In env " << full_taint->taint << std::endl;
      }
      return full_taint;
    }

    auto key = std::make_pair(current_context, op);
    auto iit = var_states_.find(key);
    if (iit == var_states_.end()) {
      auto taint =
          FullTaint(CreateStateForType(ConcretizeType(op->checked_type()), true), FunctionSet());
      var_states_[key] = taint;
      if (print) {
        std::cout << "[MPT]  Not found" << std::endl;
      }
      return taint;
    } else {
      if (print) {
        std::cout << "[MPT]  Found " << iit->second->taint << std::endl;
      }
      return iit->second;
    }
  }

  FullTaint VisitExpr_(const GlobalVarNode* op, ContextT current_context) {
    auto taint = Array<Bool>({Bool(false)});
    auto function_points_to = FunctionSet();

    auto base_func = mod_->Lookup(GetRef<GlobalVar>(op));
    if (base_func.as<FunctionNode>()) {
      function_points_to.Set(Downcast<Function>(base_func), Bool(true));
    }
    return FullTaint(taint, function_points_to);
  }

  VarSet GetFreeVars(const Function& expr) {
    auto it = free_vars_map_.find(expr.get());
    if (it == free_vars_map_.end()) {
      auto free_vars = FreeVarsDedup(expr);
      free_vars_map_[expr.get()] = free_vars;
      return free_vars;
    } else {
      return it->second;
    }
  }

  FullTaint VisitExpr_(const FunctionNode* op, ContextT current_context) {
    auto function = GetRef<Function>(op);
    auto free_vars = GetFreeVars(function);
    for (auto free_var : free_vars) {
      function_environments_[op].Set(free_var, this->VisitExpr(free_var, current_context));
    }

    FunctionSet function_points_to;
    function_points_to.Set(function, Bool(true));
    TaintT taint = SingletonArray(false);
    return FullTaint(taint, function_points_to);
  }

  FullTaint VisitBody(const Function& fn, ContextT context, const CallNode* call) {
    Map<TypeVar, Type> type_environment;
    ICHECK_EQ(fn->type_params.size(), call->type_args.size());
    for (size_t i = 0; i < call->type_args.size(); ++i) {
      type_environment.Set(fn->type_params[i], call->type_args[i]);
    }

    type_environment_stack_.push_back(type_environment);
    environment_stack_.push_back(function_environments_[fn.get()]);
    auto context_fn_key = std::make_pair(context, fn.get());
    on_stack_.insert(context_fn_key);
    function_stack_.push_back(fn);
    auto full_taint = this->VisitExpr(fn->body, context);
    function_stack_.pop_back();
    on_stack_.erase(context_fn_key);
    environment_stack_.pop_back();
    type_environment_stack_.pop_back();
    return full_taint;
  }

  FullTaint VisitExpr_(const CallNode* op, ContextT current_context) {
    auto on_device_props = GetOnDeviceProps(op);
    if (on_device_props.body.defined()) {
      return this->VisitExpr(on_device_props.body, current_context);
    }

    if (op->op.as<OpNode>() || op->op.as<ConstructorNode>()) {
      auto taint = CreateStateForType(ConcretizeType(op->checked_type()), false);
      auto function_points_to = FunctionSet();
      return FullTaint(taint, function_points_to);
    }

    auto caller_context = current_context;
    auto callee_context = op;

    auto op_full_taint = this->VisitExpr(op->op, current_context);
    auto callees = op_full_taint->function_points_to;
    Array<FullTaint> callee_taints;
    // std::cout << "[MPT] Call " << op->op << " " << callees.size() << std::endl;
    for (auto kv : callees) {
      auto callee_fn = kv.first;
      // std::cout << "[MPT]  Callee " << GetFunctionName(callee_fn) << std::endl;

      //////////////////////////////
      callees_[op].insert(callee_fn.get());

      auto callee_name = callee_fn->GetAttr<String>("db.function_name");
      bool print = false;  //(callee_name == "map" || callee_name == "lstm_cell");
      if (print) {
        std::cout << "[MPT] Calling " << callee_name << " at " << GetRef<Expr>(op) << std::endl;
      }
      //////////////////////////////

      ICHECK_EQ(callee_fn->params.size(), op->args.size());
      for (size_t i = 0; i < callee_fn->params.size(); ++i) {
        auto arg = op->args[i];
        auto param = callee_fn->params[i];
        // if (op->args.size() == 10) {
        // this->VisitExpr(op->args[9], current_context);
        // }
        auto arg_full_taint = this->VisitExpr(arg, current_context);
        auto param_full_taint =
            ResizeTaint(arg_full_taint, arg->checked_type(), param->checked_type());

        //////////////////////////////
        if (print) {
          std::string arg_str = "";
          if (auto vn = arg.as<VarNode>()) {
            arg_str = vn->vid->name_hint;
          }
          std::cout << "[MPT]  Param " << current_context << " " << arg_str << " "
                    << param->vid->name_hint << " " << param_full_taint->taint << std::endl;
        }
        //////////////////////////////

        Add(param, callee_context, param_full_taint, "function param");
      }

      FullTaint callee_return_full_taint;
      if (on_stack_.count(std::make_pair(callee_context, callee_fn.get())) ||
          // callee_name == "lstm_cell") {
          false) {
        callee_return_full_taint = GetOrCreateFunctionState(callee_fn, callee_context);
        if (print) {
          std::cout << "[MPT] Return value 1 " << callee_name << " "
                    << callee_return_full_taint->taint << std::endl;
        }
      } else {
        callee_return_full_taint = VisitBody(callee_fn, callee_context, op);
        callee_return_full_taint = Add(callee_fn, callee_context, callee_return_full_taint);
        if (print) {
          std::cout << "[MPT] Return value 2 " << callee_name << " "
                    << callee_return_full_taint->taint << std::endl;
        }
      }
      auto call_full_taint =
          ResizeTaint(callee_return_full_taint, callee_fn->ret_type, op->checked_type());
      callee_taints.push_back(call_full_taint);
    }

    return Merge(callee_taints);
  }

  FullTaint VisitExpr_(const LetNode* op, ContextT current_context) {
    auto value_res = this->VisitExpr(op->value, current_context);
    auto added_res = Add(op->var, current_context, value_res, "Let value");
    // if (op->var->checked_type().as<TypeCallNode>()) {
    //   std::cout << "[MPT]   Let " << current_context << " " << op->var->vid->name_hint << " "
    //             << value_res->taint << " " << added_res->taint << std::endl;
    // }
    return this->VisitExpr(op->body, current_context);
  }

  FullTaint VisitExpr_(const IfNode* op, ContextT current_context) {
    auto cond_taint = this->VisitExpr(op->cond, current_context);
    auto true_taint = this->VisitExpr(op->true_branch, current_context);
    auto false_taint = this->VisitExpr(op->false_branch, current_context);
    return Merge(Array<FullTaint>({true_taint, false_taint}));
  }

  FullTaint VisitExpr_(const OpNode* op, ContextT current_context) {
    auto taint = Array<Bool>({Bool(false)});
    auto function_points_to = FunctionSet();
    return FullTaint(taint, function_points_to);
  }

  FullTaint VisitExpr_(const TupleGetItemNode* op, ContextT current_context) {
    auto tuple_taint = this->VisitExpr(op->tuple, current_context);
    ICHECK_GT(tuple_taint->taint.size(), op->index);
    auto taint = Array<Bool>({tuple_taint->taint[op->index]});
    auto function_points_to = tuple_taint->function_points_to;
    return FullTaint(taint, function_points_to);
  }

  FullTaint VisitExpr_(const RefCreateNode* op, ContextT current_context) {
    return UnsupportedFunction(op, current_context);
  }

  FullTaint VisitExpr_(const RefReadNode* op, ContextT current_context) {
    return UnsupportedFunction(op, current_context);
  }

  FullTaint VisitExpr_(const RefWriteNode* op, ContextT current_context) {
    return UnsupportedFunction(op, current_context);
  }

  FullTaint UnsupportedFunction(const ExprNode* op, ContextT current_context) {
    ICHECK(false) << "Do not support " << op->GetTypeKey();
    auto taint = Array<Bool>({Bool(false)});
    auto function_points_to = FunctionSet();
    return FullTaint(taint, function_points_to);
  }

  FullTaint VisitExpr_(const ConstructorNode* op, ContextT current_context) {
    auto taint = Array<Bool>({Bool(false)});
    auto function_points_to = FunctionSet();
    return FullTaint(taint, function_points_to);
  }

  FullTaint VisitExpr_(const MatchNode* op, ContextT current_context) {
    ICHECK(!op->data->checked_type().as<TupleTypeNode>());
    auto data_full_taint = this->VisitExpr(op->data, current_context);
    auto collapsed_data_taint = CollapseTaint(data_full_taint->taint);

    Array<FullTaint> clause_taints;
    for (auto clause : op->clauses) {
      auto pattern_vars = CollectPatternVars(clause->lhs);
      for (auto& var : pattern_vars) {
        Add(var, current_context,
            FullTaint(CreateStateForType(ConcretizeType(var->checked_type()), collapsed_data_taint),
                      data_full_taint->function_points_to),
            "Match pattern");
      }
      clause_taints.push_back(this->VisitExpr(clause->rhs, current_context));
    }

    return Merge(clause_taints);
  }

  const IRModule& mod_;

  VarStateMap var_states_;
  FunctionStateMap function_states_;
  FunctionEnvironmentMap function_environments_;
  std::unordered_map<const FunctionNode*, VarSet> free_vars_map_;
  OnStackSet on_stack_;
  std::vector<Map<Var, FullTaint>> environment_stack_;
  std::vector<Map<TypeVar, Type>> type_environment_stack_;

  std::vector<Function> function_stack_;
  std::unordered_map<const CallNode*, std::unordered_set<const FunctionNode*>> callees_;
};  // namespace

}  // namespace

IRModule ComputeConstantDepths(IRModule& mod) {
  std::cout << "[SAI] Starting hoisting" << std::endl;
  SchedulingAbstractInterpreter analysis(mod);
  return analysis.PerformAnalysis();
}

namespace transform {
Pass HoistNonSequentialOps() {
  runtime::TypedPackedFunc<IRModule(IRModule, PassContext)> pass_func =
      [=](IRModule m, PassContext pc) { return ComputeConstantDepths(m); };
  return CreateModulePass(pass_func, 0, "HoistNonSequentialOps", {});
}

TVM_REGISTER_GLOBAL("relay._transform.HoistNonSequentialOps").set_body_typed(HoistNonSequentialOps);

}  // namespace transform

}  // namespace relay
}  // namespace tvm
