#[version = "0.0.5"]

type MVTree {
  InnerNode(MVTree, MVTree),
  LeafNode(Tensor[(128, 128), float32], Tensor[(1, 128), float32]),
}

def @tuple_map_mvrnn(
  %vweight: Tensor[(128, 256), float32],
  %vbias: Tensor[(1, 128), float32],
  %mweight: Tensor[(128, 256), float32],
  %mbias: Tensor[(1, 128), float32],
  %left: MVTree,
  %right: MVTree
) -> (Tensor[(128, 128), float32], Tensor[(1, 128), float32],
      Tensor[(128, 128), float32], Tensor[(1, 128), float32]) {
  let %ll = @mvrnn(%vweight, %vbias, %mweight, %mbias, %left);
  let %rr = @mvrnn(%vweight, %vbias, %mweight, %mbias, %right);
  (%ll.0, %ll.1, %rr.0, %rr.1)
}

def @mvrnn(
  %vweight: Tensor[(128, 256), float32],
  %vbias: Tensor[(1, 128), float32],
  %mweight: Tensor[(128, 256), float32],
  %mbias: Tensor[(1, 128), float32],
  %tree: MVTree
) -> (Tensor[(128, 128), float32], Tensor[(1, 128), float32]) {

  match? (%tree) {
    InnerNode(%left, %right) => {
      let %rec_res = @tuple_map_mvrnn(%vweight, %vbias, %mweight, %mbias, %left, %right);
      let %ml = %rec_res.0;
      let %vl = %rec_res.1;
      let %mr = %rec_res.2;
      let %vr = %rec_res.3;

      let %v_func = fn(
        %v1: Tensor[(1, 128), float32],
        %v2: Tensor[(1, 128), float32],
        %vweight: Tensor[(128, 256), float32],
        %vbias: Tensor[(1, 128), float32],
        Primitive=1
      ) -> Tensor[(1, 128), float32] {
        tanh(%vbias + nn.dense(concatenate((%v1, %v2), axis=1), %vweight, units=128))
      };

      let %m_func = fn(
        %ml: Tensor[(128, 128), float32],
        %mr: Tensor[(128, 128), float32],
        %mweight: Tensor[(128, 256), float32],
        %mbias: Tensor[(1, 128), float32],
        Primitive=1
      ) -> Tensor[(128, 128), float32] {
        %mbias + nn.dense(concatenate((%ml, %mr), axis=1), %mweight, units=128)
      };

      let %dense_func = fn(
        %v: Tensor[(1, 128), float32],
        %m: Tensor[(128, 128), float32],
        Primitive=1
      ) {
        nn.dense(%v, %m, units=128)
      };

      let %mvlr = %dense_func(%vl, %mr);
      let %mvrl = %dense_func(%vr, %ml);
      (
        %m_func(%ml, %mr, %mweight, %mbias),
        %v_func(%mvlr, %mvrl, %vweight, %vbias)
      )
    },
    LeafNode(%m, %v) => {
      (%m, %v)
    }
  }
}

def @main(
  %vweight: Tensor[(128, 256), float32],
  %vbias: Tensor[(1, 128), float32],
  %mweight: Tensor[(128, 256), float32],
  %mbias: Tensor[(1, 128), float32],
  %tree: MVTree
) -> (Tensor[(128, 128), float32], Tensor[(1, 128), float32]) {
  @mvrnn(%vweight, %vbias, %mweight, %mbias, %tree)
}
