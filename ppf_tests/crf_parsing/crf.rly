#[version = "0.0.5"]

def @sp_repr(
  %max_seq_len: Tensor[(), int32SS],
  %sp_reprs: Tensor[(16384, 256), float32],

  %i: Tensor[(), int32SS],
  %j: Tensor[(), int32SS],
) {
  take(%sp_reprs, %i * %max_seq_len + %j, axis=0, mode="fast")
}

def @delta(
  %max_seq_len: Tensor[(), int32SS],
  %sp_reprs: Tensor[(16384, 256), float32],
  %inner_w: Tensor[(256, 256), float32],

  %i: Tensor[(), int32SS],
  %k: Tensor[(), int32SS],
  %j: Tensor[(), int32SS],
) {
  let %repr_ik = @sp_repr(%max_seq_len, %sp_reprs, %i, %k);
  let %repr_kp1j = @sp_repr(%max_seq_len, %sp_reprs, %k + 1, %j);
  nn.dense(nn.dense(%repr_ik, %inner_w, units=256), %repr_kp1j, units=256)
}

def @inner_summands(
  %i: Tensor[(), int32SS],
  %j: Tensor[(), int32SS],
  %k: Tensor[(), int32SS],
) {
  if (%k == %j) {
    Nil
  } else {
    Cons(
      @delta(),
      @inner_summands(%i, %j, %k + 1)
    )
  }
}

def @alpha(
  %i: Tensor[(), int32SS],
  %j: Tensor[(), int32SS],
) {
  let %all_summands = @inner_summands(%i, %j, %i + 1)

}
