#[version = "0.0.5"]

def @lstm_cell(
  %linear_weight10: Tensor[(256, 256), float32],
  %linear_weight11: Tensor[(768, 256), float32],
  %linear_bias21: Tensor[(1, 768), float32],
  %linear_bias51: Tensor[(1, 768), float32],
  %linear_weight71: Tensor[(256, 256), float32],
  %linear_weight41: Tensor[(768, 256), float32],
  %linear_bias11: Tensor[(1, 256), float32],
  %linear_bias81: Tensor[(1, 256), float32],
  %lstmcell_input12: Tensor[(1, 256), float32],
  %lstmcell_children: List[(Tensor[(1, 256), float32], Tensor[(1, 256), float32])]
) {
  let %v12 = @foldl(
    fn (%x13, %y14) { add(%x13, %y14) },
    zeros(shape=[1, 256], dtype="float32"),
    @map(fn (%z15) { %z15.1 }, %lstmcell_children)
  );

  let %linear_func = fn (
    %_weight: Tensor[(768, 256), float32],
    %_bias: Tensor[(1, 768), float32],
    %_input: Tensor[(1, 256), float32],
    Primitive=1
  ) -> Tensor[(1, 768), float32] {
    add(nn.dense(%_input, %_weight, units=None), %_bias)
  };

  let %v13 = %linear_func(%linear_weight11, %linear_bias21, %lstmcell_input12);
  let %v14 = %linear_func(%linear_weight41, %linear_bias51, %v12);

  let %v15 = %v13 + %v14;
  let %v16 = fn (%param0, %param1, %param2, Primitive=1) -> Tensor[(1, 256), float32] {
    let %v4 = split(%param0, indices_or_sections=3, axis=1);
    nn.dense(sigmoid(%v4.0), %param1, units=None) + %param2
  };
  let %fx = %v16(%v15, %linear_weight10, %linear_bias11);
  let %v23 = fn (%param01, Primitive=1) -> Tensor[(1, 256), float32] {
    let %v17 = split(%param01, indices_or_sections=3, axis=1);
    let %v19 = split(%param01, indices_or_sections=3, axis=1);
    sigmoid(%v17.0) * tanh(%v19.2)
  };

  let %v29 = fn (%z16) {
    sigmoid(
      add(nn.dense(%z16.1, %linear_weight71, units=None), %linear_bias81) + %fx
    ) * %z16.0
  };
  let %v36 = @foldl(
    fn (%x13, %y14) { add(%x13, %y14) },
    %v23(%v15),
    @map(%v29, %lstmcell_children)
  );
  let %v37 = fn (%param02, %param11, Primitive=1) -> Tensor[(1, 256), float32] {
    let %v32 = split(%param02, indices_or_sections=3, axis=1);
    sigmoid(%v32.1) * tanh(%param11)
  };
  let %v38 = %v37(%v15, %v36);
  (%v36, %v38)
}

def @treelstm(
  %linear_weight102: Tensor[(256, 256), float32],
  %linear_weight73: Tensor[(256, 256), float32],
  %linear_weight13: Tensor[(768, 256), float32],
  %linear_bias53: Tensor[(1, 768), float32],
  %linear_bias23: Tensor[(1, 768), float32],
  %linear_weight43: Tensor[(768, 256), float32],
  %linear_bias112: Tensor[(1, 256), float32],
  %linear_bias83: Tensor[(1, 256), float32],
  %tlstm_input1: Tree[Tensor[(1, 256), float32]]
) -> (Tensor[(1, 256), float32], Tensor[(1, 256), float32]) {
  match (%tlstm_input1) {
    Rose(%i: Tensor[(1, 256), float32], %c: List[Tree[Tensor[(1, 256), float32]]]) => {
      let %v41 = fn (%x17) {
        @treelstm(%linear_weight102, %linear_weight73, %linear_weight13, %linear_bias53,
          %linear_bias23, %linear_weight43, %linear_bias112, %linear_bias83, %x17)
      };
      @lstm_cell(%linear_weight102, %linear_weight13, %linear_bias23, %linear_bias53,
        %linear_weight73, %linear_weight43, %linear_bias112, %linear_bias83, %i, @map(%v41, %c))
    },
  }
}

def @main(
  %linear_weight101: Tensor[(256, 256), float32],
  %linear_weight72: Tensor[(256, 256), float32],
  %linear_weight12: Tensor[(768, 256), float32],
  %linear_bias52: Tensor[(1, 768), float32],
  %linear_bias22: Tensor[(1, 768), float32],
  %linear_weight42: Tensor[(768, 256), float32],
  %linear_bias111: Tensor[(1, 256), float32],
  %linear_bias82: Tensor[(1, 256), float32],
  %tlstm_input: Tree[Tensor[(1, 256), float32]]
) -> (Tensor[(1, 256), float32], Tensor[(1, 256), float32]) {
  @treelstm(%linear_weight101, %linear_weight72, %linear_weight12, %linear_bias52,
    %linear_bias22, %linear_weight42, %linear_bias111, %linear_bias82, %tlstm_input)
}
