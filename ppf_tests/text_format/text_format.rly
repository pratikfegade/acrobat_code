#[version = "0.0.5"]

type MVTree {
  InnerNode(MVTree, MVTree),
  LeafNode(Tensor[(64, 64), float32], Tensor[(1, 64), float32]),
}

def @tuple_map_mvrnn(
  %vweight: Tensor[(64, 128), float32],
  %vbias: Tensor[(1, 64), float32],
  %mweight: Tensor[(64, 128), float32],
  %mbias: Tensor[(1, 64), float32],
  %left: MVTree,
  %right: MVTree
) -> ((Tensor[(64, 64), float32], Tensor[(1, 64), float32]),
      (Tensor[(64, 64), float32], Tensor[(1, 64), float32])) {
  (@mvrnn(%vweight, %vbias, %mweight, %mbias, %left),
   @mvrnn(%vweight, %vbias, %mweight, %mbias, %right))
}

def @dense(%v: Tensor[(1, 64), float32], %m: Tensor[(64, 64), float32]) -> Tensor[(1, 64), float32] {
  nn.dense(%v, %m, units=64)
}

def @tuple_map_dense(
  %vl: Tensor[(1, 64), float32],
  %ml: Tensor[(64, 64), float32],
  %vr: Tensor[(1, 64), float32],
  %mr: Tensor[(64, 64), float32]
) -> (Tensor[(1, 64), float32], Tensor[(1, 64), float32]) {
  (@dense(%vl, %mr), @dense(%vr, %ml))
}


def @mvrnn(
  %vweight: Tensor[(64, 128), float32],
  %vbias: Tensor[(1, 64), float32],
  %mweight: Tensor[(64, 128), float32],
  %mbias: Tensor[(1, 64), float32],
  %tree: MVTree
) -> (Tensor[(64, 64), float32], Tensor[(1, 64), float32]) {

  match? (%tree) {
    InnerNode(%left, %right) => {
      let %rec_res = @tuple_map_mvrnn(%vweight, %vbias, %mweight, %mbias, %left, %right);
      let %lres = %rec_res.0;
      let %rres = %rec_res.1;
      let %ml = %lres.0;
      let %mr = %rres.0;
      let %vl = %lres.1;
      let %vr = %rres.1;

      let %d_res = @tuple_map_dense(%vl, %ml, %vr, %mr);
      let %v_comp = concatenate((%d_res.0, %d_res.1), axis=1);
      let %m_comp = concatenate((%ml, %mr), axis=1);

      let %v = tanh(%vbias + nn.dense(%v_comp, %vweight, units=64));
      let %m = %mbias + nn.dense(%m_comp, %mweight, units=64);
      (%m, %v)
    },
    LeafNode(%m, %v) => {
      (%m, %v)
    }
  }
}

def @main(
  %vweight: Tensor[(64, 128), float32],
  %vbias: Tensor[(1, 64), float32],
  %mweight: Tensor[(64, 128), float32],
  %mbias: Tensor[(1, 64), float32],
  %tree: MVTree
) -> (Tensor[(64, 64), float32], Tensor[(1, 64), float32]) {
  @mvrnn(%vweight, %vbias, %mweight, %mbias, %tree)
}
